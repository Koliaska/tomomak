import numpy as np
from scipy.interpolate import LinearNDInterpolator


def make_regular(data, x_grid, y_grid, z_grid, interp_size):
    """Convert irregular 3D grid to regular.

        The x, y and z arrays are then supposed to be like arrays generated by numpy.meshgrid,
        but not necessarily regularly spaced.
    Args:
        data (3D ndarray): Data to interpolate.
        x_grid (3D ndarray): X grid.
        y_grid (3D ndarray): Y grid.
        z_grid (3D ndarray): Z grid.
        interp_size (int): The new grid wil have  interp_size * interp_size * interp_size dimensions.

    Returns:
        4 3D ndarrays: new x,y,z grids and new data
    """
    points = np.transpose(np.array([x_grid.flatten(), y_grid.flatten(), z_grid.flatten()]))
    new_data = data.flatten()
    interp = LinearNDInterpolator(points, new_data)
    x_new = np.linspace(x_grid[0, 0, 0], x_grid[-1, -1, -1], interp_size)
    y_new = np.linspace(y_grid[0, 0, 0], y_grid[-1, -1, -1], interp_size)
    z_new = np.linspace(z_grid[0, 0, 0], z_grid[-1, -1, -1], interp_size)
    x_grid, y_grid, z_grid = np.meshgrid(x_new, y_new, z_new, indexing='ij')
    new_points = np.transpose(np.array([x_grid.flatten(), y_grid.flatten(), z_grid.flatten()]))
    new_data = interp(new_points)
    new_data = np.reshape(new_data, x_grid.shape)
    return x_grid, y_grid, z_grid, new_data
